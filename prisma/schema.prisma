// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model admin {
  id                    String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  first_name            String
  last_name             String
  full_name             String
  mail_id               String                  @unique
  address               String
  gender                String
  contact_number        String                  @unique
  admin_qualification   String
  city                  String
  state                 String
  password              String?
  staff_remarks         staff_remarks[]
  student_remarks       student_remarks[]
  check_notes           check_notes[]
  check_assignments     check_assignments[]
  see_marks             see_marks[]
  cie_marks             cie_marks[]
  check_attendance      check_attendance[]
  check_monthly_report  check_monthly_report[]
  allocate_sub          allocate_sub[]
  session_details_admin session_details_admin[]
  grievance_redressal   grievance_redressal[]
}

model staff {
  id                    String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  first_name            String
  last_name             String
  full_name             String
  mail_id               String                  @unique
  address               String
  gender                String
  contact_number        String                  @unique
  staff_qualification   String
  city                  String
  state                 String
  password              String?
  co_admin              co_admin[]
  notes                 notes[]
  academic_year         academic_year           @relation(fields: [Academic_year], references: [Academic_year])
  Academic_year         DateTime
  staff_remarks         staff_remarks[]
  assignments           assignments[]
  unit_test             unit_test[]
  see_marks             see_marks[]
  cie_marks             cie_marks[]
  attendance            attendance[]
  check_attendance      check_attendance[]
  check_monthly_report  check_monthly_report[]
  allocate_sub          allocate_sub[]
  branch                branch                  @relation(fields: [branch_name], references: [branch_name])
  branch_name           String
  session_details_staff session_details_staff[]
}

model co_admin {
  id      String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  staff   staff  @relation(fields: [staffId], references: [id])
  staffId String @db.Uuid
}

model student {
  id                      String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  reg_no                  String
  first_name              String
  last_name               String
  full_name               String
  mail_id                 String                    @unique
  address                 String
  gender                  String
  contact_number          String                    @unique
  city                    String
  state                   String
  password                String?
  branch                  branch                    @relation(fields: [Branch_name], references: [branch_name])
  Branch_name             String
  semesters               semesters                 @relation(fields: [Sem_no], references: [sem_no])
  Sem_no                  String
  notes                   notes[]
  academic_year           academic_year             @relation(fields: [Academic_year], references: [Academic_year])
  Academic_year           DateTime
  student_remarks         student_remarks[]
  assignments             assignments[]
  unit_test               unit_test[]
  see_marks               see_marks[]
  cie_marks               cie_marks[]
  attendance              attendance[]
  monthly_report          monthly_report[]
  session_details_student session_details_student[]
  grievance_redressal     grievance_redressal[]
}

model session_details_admin {
  session_id  String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  login_time  DateTime @default(dbgenerated("now()")) @db.Timestamptz()
  logout_time DateTime @default(dbgenerated("now()")) @db.Timestamptz()
  admin       admin    @relation(fields: [adminId], references: [id])
  adminId     String   @db.Uuid
}

model session_details_staff {
  session_id  String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  login_time  DateTime @default(dbgenerated("now()")) @db.Timestamptz()
  logout_time DateTime @default(dbgenerated("now()")) @db.Timestamptz()
  staff       staff    @relation(fields: [staffId], references: [id])
  staffId     String   @db.Uuid
}

model session_details_student {
  session_id  String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  login_time  DateTime @default(dbgenerated("now()")) @db.Timestamptz()
  logout_time DateTime @default(dbgenerated("now()")) @db.Timestamptz()
  student     student  @relation(fields: [studentId], references: [id])
  studentId   String   @db.Uuid
}

model academic_year {
  Academic_year DateTime    @id @unique
  student       student[]
  staff         staff[]
  see_marks     see_marks[]
}

model branch {
  branch_name    String           @id
  semesters      semesters[]
  student        student[]
  staff          staff[]
  notes          notes[]
  assignments    assignments[]
  see_marks      see_marks[]
  cie_marks      cie_marks[]
  attendance     attendance[]
  monthly_report monthly_report[]
  exam_schedule  exam_schedule[]
}

model notes {
  id              String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title           String
  unit_no         String
  unit_name       String
  uploaded_date   DateTime?   @default(now())
  file_pdf        String?
  subjects        subjects    @relation(fields: [Sub_code], references: [sub_code])
  Sub_code        String
  student         student     @relation(fields: [studentId], references: [id])
  studentId       String      @db.Uuid
  staff           staff       @relation(fields: [staffId], references: [id])
  staffId         String      @db.Uuid
  check_notes     check_notes @relation(fields: [checked_notesId], references: [id])
  checked_notesId String      @db.Uuid
  branch          branch      @relation(fields: [Branch_name], references: [branch_name])
  Branch_name     String
}

model check_notes {
  id      String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  notes   notes[]
  admin   admin   @relation(fields: [adminId], references: [id])
  adminId String  @db.Uuid
}

model assignments {
  id                  String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  Unit_no             String
  title               String
  description         String
  deadline            DateTime
  uploaded_date       DateTime?         @default(now())
  file_pdf            String
  staff               staff             @relation(fields: [staffId], references: [id])
  staffId             String            @db.Uuid
  student             student           @relation(fields: [studentId], references: [id])
  studentId           String            @db.Uuid
  check_assignments   check_assignments @relation(fields: [check_assignmentsId], references: [id])
  check_assignmentsId String            @db.Uuid
  branch              branch            @relation(fields: [Branch_name], references: [branch_name])
  Branch_name         String
}

model check_assignments {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  assignments assignments[]
  admin       admin         @relation(fields: [adminId], references: [id])
  adminId     String        @db.Uuid
}

model unit_test {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  UT_no              String
  UT_name            String
  Max_marks          String
  UT_questions_pdf   String
  Date_of_submittion DateTime
  staff              staff    @relation(fields: [staffId], references: [id])
  staffId            String   @db.Uuid
  student            student? @relation(fields: [studentId], references: [id])
  studentId          String?  @db.Uuid
}

model subjects {
  sub_code       String           @id
  sub_name       String
  semesters      semesters        @relation(fields: [Sem_no], references: [sem_no])
  Sem_no         String
  notes          notes[]
  cie_marks      cie_marks[]
  attendance     attendance[]
  monthly_report monthly_report[]
  allocate_sub   allocate_sub[]
  exam_schedule  exam_schedule[]
}

model semesters {
  sem_no         String           @id
  subjects       subjects[]
  student        student[]
  branch         branch?          @relation(fields: [Branch_name], references: [branch_name])
  Branch_name    String?
  see_marks      see_marks[]
  monthly_report monthly_report[]
  exam_schedule  exam_schedule[]
}

model staff_remarks {
  id                  String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  remarks_category    String
  remarks_description String
  staff               staff   @relation(fields: [staffId], references: [id])
  staffId             String  @db.Uuid
  admin               admin?  @relation(fields: [adminId], references: [id])
  adminId             String? @db.Uuid
}

model student_remarks {
  id                  String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  remarks_category    String
  remarks_description String
  admin               admin?  @relation(fields: [adminId], references: [id])
  adminId             String? @db.Uuid
  student             student @relation(fields: [studentId], references: [id])
  studentId           String  @db.Uuid
}

model see_marks {
  id            String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  CIE_total     String
  SEE_total     String
  Grand_total   String
  semesters     semesters     @relation(fields: [Sem_no], references: [sem_no])
  Sem_no        String
  student       student       @relation(fields: [studentId], references: [id])
  studentId     String        @db.Uuid
  academic_year academic_year @relation(fields: [Academic_year], references: [Academic_year])
  Academic_year DateTime
  branch        branch        @relation(fields: [Branch_name], references: [branch_name])
  Branch_name   String
  admin         admin?        @relation(fields: [adminId], references: [id])
  adminId       String?       @db.Uuid
  staff         staff?        @relation(fields: [staffId], references: [id])
  staffId       String?       @db.Uuid
}

model cie_marks {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sub_marks   String
  CIE_total   String
  admin       admin?   @relation(fields: [adminId], references: [id])
  adminId     String?  @db.Uuid
  staff       staff?   @relation(fields: [staffId], references: [id])
  staffId     String?  @db.Uuid
  student     student  @relation(fields: [studentId], references: [id])
  studentId   String   @db.Uuid
  subjects    subjects @relation(fields: [Sub_code], references: [sub_code])
  Sub_code    String
  branch      branch   @relation(fields: [Branch_name], references: [branch_name])
  Branch_name String
}

model attendance {
  id                 String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  status             Boolean          @default(false) //absent 
  Date               DateTime         @default(dbgenerated("now()"))
  hour_number        String
  staff              staff?           @relation(fields: [staffId], references: [id])
  staffId            String?          @db.Uuid
  student            student          @relation(fields: [studentId], references: [id])
  studentId          String           @db.Uuid
  branch             branch           @relation(fields: [Branch_name], references: [branch_name])
  Branch_name        String
  subjects           subjects         @relation(fields: [Sub_code], references: [sub_code])
  Sub_code           String
  check_attendance   check_attendance @relation(fields: [check_attendanceId], references: [id])
  check_attendanceId String           @db.Uuid
}

model check_attendance {
  id         String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  attendance attendance[]
  admin      admin        @relation(fields: [adminId], references: [id])
  adminId    String       @db.Uuid
  staff      staff?       @relation(fields: [staffId], references: [id])
  staffId    String?      @db.Uuid
}

model monthly_report {
  id                     String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  Month                  DateTime
  Subject_percentage     String
  subjects               subjects              @relation(fields: [Sub_code], references: [sub_code])
  Sub_code               String
  branch                 branch                @relation(fields: [Branch_name], references: [branch_name])
  Branch_name            String
  semesters              semesters             @relation(fields: [semestersSem_no], references: [sem_no])
  semestersSem_no        String
  student                student               @relation(fields: [studentId], references: [id])
  studentId              String                @db.Uuid
  check_monthly_report   check_monthly_report? @relation(fields: [check_monthly_reportId], references: [id])
  check_monthly_reportId String?               @db.Uuid
}

model check_monthly_report {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  monthly_report monthly_report[]
  admin          admin            @relation(fields: [adminId], references: [id])
  adminId        String           @db.Uuid
  staff          staff            @relation(fields: [staffId], references: [id])
  staffId        String           @db.Uuid
}

model allocate_sub {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  subjects         subjects @relation(fields: [subjectsSub_code], references: [sub_code])
  subjectsSub_code String
  admin            admin?   @relation(fields: [adminId], references: [id])
  adminId          String?  @db.Uuid
  staff            staff    @relation(fields: [staffId], references: [id])
  staffId          String   @db.Uuid
}

model exam_schedule {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type_of_exam      String
  exam_date_time    DateTime  @default(dbgenerated("now()"))
  branch            branch    @relation(fields: [branchBranch_name], references: [branch_name])
  branchBranch_name String
  subjects          subjects  @relation(fields: [subjectsSub_code], references: [sub_code])
  subjectsSub_code  String
  semesters         semesters @relation(fields: [semestersSem_no], references: [sem_no])
  semestersSem_no   String
}

model grievance_redressal {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  issue_type        String
  issue_description String
  Date              DateTime
  admin     admin   @relation(fields: [adminId], references: [id])
  adminId   String  @db.Uuid
  student   student @relation(fields: [studentId], references: [id])
  studentId String  @db.Uuid
}
