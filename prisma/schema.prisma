// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model admin_login {
  admin_email                 String                        @unique
  admin_name                  String
  password                    String
  admin_login_session_details admin_login_session_details[]
}

model admin_login_session_details {
  session_id  Int         @id @default(autoincrement())
  admin_login admin_login @relation(fields: [admin_name], references: [admin_email])
  admin_name  String
  login_at    DateTime    @default(dbgenerated("now()"))
  logout_at   DateTime    @default(dbgenerated("now()"))
}

model staff_login {
  staff_email String @unique
  satff_name  String
  password    String

  staff_login_session_details staff_login_session_details[]
}

model staff_login_session_details {
  session_id  Int         @id @default(autoincrement())
  staff_login staff_login @relation(fields: [staff_name], references: [staff_email])
  staff_name  String
  login_at    DateTime    @default(dbgenerated("now()"))
  logout_at   DateTime    @default(dbgenerated("now()"))
}

model student_login {
  student_email                 String                          @unique
  student_name                  String
  password                      String
  student_login_session_details student_login_session_details[]
}

model student_login_session_details {
  session_id    Int           @id @default(autoincrement())
  student_login student_login @relation(fields: [student_name], references: [student_email])
  student_name  String
  login_at      DateTime      @default(dbgenerated("now()"))
  logout_at     DateTime      @default(dbgenerated("now()"))
}

model admin {
  id                  Int               @id @default(autoincrement())
  admin_id            String            @unique
  first_name          String
  last_name           String
  full_name           String
  email               String            @unique
  address             String            @db.VarChar(250)
  gender              String
  contact_number      Int               @unique @db.Integer 
  state               String
  city                String
  password            String            @db.VarChar(20)
  admin_qualification String            @db.VarChar(250)
  staff_remarks       staff_remarks[]
  student_remarks     student_remarks[]
}

model student {
  id                Int               @id @default(autoincrement())
  first_name        String
  last_name         String
  full_name         String
  reg_no            String            @unique
  email             String            @unique
  address           String            @db.VarChar(250)
  gender            String
  contact_number    Int               @unique @db.Integer
  city              String
  state             String
  password          String            @db.VarChar(20)
  academic_year     academic_year     @relation(fields: [stu_academic_year], references: [year_number])
  stu_academic_year Int
  branch            branch            @relation(fields: [branchID], references: [ID])
  branchID          String            @db.Uuid
  semester          semester          @relation(fields: [semesterSem_id], references: [sem_id])
  semesterSem_id    String            @db.Uuid
  student_remarks   student_remarks[]
  see_marks         see_marks[]
  CIE_marks         CIE_marks[]
  attendance        attendance[]
  notes             notes[]
  assignments       assignments[]
}

model staff {
  id                  Int             @id @default(autoincrement())
  staff_id            String          @unique
  first_name          String
  last_name           String
  full_name           String
  email               String          @unique
  address             String          @db.VarChar(250)
  gender              String
  contact_number      Int             @unique
  city                String
  state               String
  password            String          @db.VarChar(20)
  staff_qualification String
  academic_year       academic_year   @relation(fields: [ac_year], references: [year_number])
  ac_year             Int
  branch              branch          @relation(fields: [branch_name], references: [branch_code])
  branch_name         String
  subject             subject         @relation(fields: [subject_name], references: [sub_code])
  subject_name        String
  staff_remarks       staff_remarks[]
  notes               notes[]
}

model subject {
  id             Int              @id @default(autoincrement())
  sub_code       String           @unique
  subject_name   String
  staff          staff[]
  branch         branch           @relation(fields: [branchID], references: [ID])
  branchID       String           @db.Uuid
  exam_schedule  exam_schedule[]
  CIE_marks      CIE_marks[]
  attendance     attendance[]
  monthly_report monthly_report[]
  notes          notes[]
}

model semester {
  sem_id              String                @id @default(uuid()) @db.Uuid
  sem_number          Int                   @unique
  student             student[]
  exam_schedule       exam_schedule[]
  girevence_redressal girevence_redressal[]
  see_marks           see_marks[]

  CIE_marks      CIE_marks[]
  attendance     attendance[]
  monthly_report monthly_report[]
  notes          notes[]
  assignments    assignments[]
}

model academic_year {
  ID          String    @id @default(uuid()) @db.Uuid
  year_number Int       @unique @db.Integer
  staff       staff[]
  student     student[]
}

model branch {
  ID                  String                @id @default(uuid()) @db.Uuid
  branch_code         String                @unique
  banch_name          String
  staff               staff[]
  student             student[]
  subject             subject[]
  exam_schedule       exam_schedule[]
  staff_remarks       staff_remarks[]
  girevence_redressal girevence_redressal[]
  see_marks           see_marks[]
  CIE_marks           CIE_marks[]
  attendance          attendance[]
  monthly_report      monthly_report[]
  notes               notes[]
  assignments         assignments[]
}

model exam_schedule {
  ID             String       @id @default(uuid()) @db.Uuid
  exam_at        DateTime
  branch         branch       @relation(fields: [branchID], references: [ID])
  branchID       String       @db.Uuid
  semester       semester     @relation(fields: [semesterSem_id], references: [sem_id])
  semesterSem_id String       @db.Uuid
  subject        subject      @relation(fields: [subjectId], references: [id])
  subjectId      Int
  type_of_exam   type_of_exam @relation(fields: [type_of_examID], references: [ID])
  type_of_examID String       @db.Uuid
}

model type_of_exam {
  ID            String          @id @default(uuid()) @db.Uuid
  exam_type     String
  exam_schedule exam_schedule[]
}

model staff_remarks {
  ID                  String @id @default(uuid()) @db.Uuid
  branch              branch @relation(fields: [branch_name], references: [branch_code])
  branch_name         String
  staff               staff  @relation(fields: [staff_name], references: [email])
  staff_name          String
  admin_by            admin  @relation(fields: [admin_name], references: [email])
  admin_name          String
  remarks_category    String
  remarks_description String @db.VarChar(250)
}

model student_remarks {
  ID                  String  @id @default(uuid()) @db.Uuid
  student             student @relation(fields: [student_name], references: [reg_no])
  student_name        String
  admin_by            admin   @relation(fields: [admin_name], references: [email])
  admin_name          String
  remarks_category    String
  remarks_description String  @db.VarChar(250)
}

model girevence_redressal {
  id                String   @id @default(uuid()) @db.Uuid
  branch            branch   @relation(fields: [branch_name], references: [branch_code])
  branch_name       String
  sem               semester @relation(fields: [sem_number], references: [sem_number])
  sem_number        Int
  Date              DateTime
  issue_description String   @db.VarChar(250)
  status            String
}

model see_marks {
  id          String   @id @default(uuid()) @db.Uuid
  student     student  @relation(fields: [reg_no], references: [reg_no])
  reg_no      String
  barnch      branch   @relation(fields: [branch], references: [branch_code])
  branch      String
  semester    semester @relation(fields: [sem_number], references: [sem_number])
  sem_number  Int
  CIE_total   Int
  SEE_total   Int
  Grand_total Int
}

model CIE_marks {
  id            String   @id @default(uuid()) @db.Uuid
  student       student  @relation(fields: [reg_no], references: [reg_no])
  reg_no        String
  barnch        branch   @relation(fields: [branch], references: [branch_code])
  branch        String
  semester      semester @relation(fields: [sem_number], references: [sem_number])
  sem_number    Int
  subject       subject  @relation(fields: [subjects], references: [sub_code])
  subjects      String
  subject_marks Int
  CIE_total     Int
}

model attendance {
  id           String   @id @default(uuid()) @db.Uuid
  branch       branch   @relation(fields: [branch_name], references: [branch_code])
  branch_name  String
  semester     semester @relation(fields: [sem_number], references: [sem_number])
  sem_number   Int
  subject      subject  @relation(fields: [subjects], references: [sub_code])
  subjects     String
  student      student  @relation(fields: [student_name], references: [reg_no])
  student_name String
  status       Boolean  @default(false)
  Date         DateTime
}

model monthly_report {
  id                 String   @id @default(uuid()) @db.Uuid
  Month              DateTime
  branch             branch   @relation(fields: [branch_name], references: [branch_code])
  branch_name        String
  semester           semester @relation(fields: [sem_number], references: [sem_number])
  sem_number         Int
  subject            subject  @relation(fields: [subjects], references: [sub_code])
  subjects           String
  Subject_percentage String
}

model notes {
  id          Int      @id @default(autoincrement())
  title       String
  content     String
  pdf         Bytes
  branch      branch   @relation(fields: [branch_name], references: [branch_code])
  branch_name String
  semester    semester @relation(fields: [sem_number], references: [sem_number])
  sem_number  Int
  subject     subject  @relation(fields: [subjects], references: [sub_code])
  subjects    String
  staff       staff    @relation(fields: [staff_name], references: [staff_id])
  staff_name  String
  student     student  @relation(fields: [reg_no], references: [id])
  reg_no      Int
}

model assignments {
  id                Int      @id @default(autoincrement())
  title             String
  description       String
  deadline          DateTime
  submit_assignment Bytes
  branch            branch   @relation(fields: [branch_name], references: [branch_code])
  branch_name       String
  semester          semester @relation(fields: [sem_number], references: [sem_number])
  sem_number        Int
  Submited_student  student  @relation(fields: [student_name], references: [reg_no])
  student_name      String
}
